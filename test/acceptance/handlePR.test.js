import nock from 'nock';
import request from 'supertest';

import * as GitHubMocks from '../helpers/githubApiMocks';
import * as GitHubMockResponses from '../helpers/githubApiMockResponses';
import StaticmanAPI from '../../source/server';

// TODO: Rework this with more robust tests once we ditch express-github-webhook

const staticman = new StaticmanAPI().server;
const supportedApiVersions = [['v1']];

let basePrResponse;
let baseWebhookBody;

beforeEach(() => {
  basePrResponse = GitHubMockResponses.pullRequest();
  basePrResponse.head.ref = 'staticman_123456';
  baseWebhookBody = {
    repository: {
      owner: {
        login: 'johndoe',
      },
      name: 'foobar',
    },
    number: 1,
  };
});

afterEach(() => {
  nock.cleanAll();
});

describe.each(supportedApiVersions)('API %s - Webhook endpoint', (version) => {
  it('ignores pull requests not generated by staticman', async () => {
    const mockPrResponse = {
      ...basePrResponse,
      head: {
        ref: 'some-other-branch',
      },
    };

    const pullScope = GitHubMocks.fetchPullRequest(mockPrResponse);

    expect.assertions(1);

    await request(staticman)
      .post(`/${version}/webhook`)
      .set('X-GitHub-Delivery', 'id')
      .set('X-GitHub-Event', 'pull_request')
      .send(baseWebhookBody)
      .expect(200);

    expect(pullScope.isDone()).toBe(true);
  });

  it('ignores staticman pull requests which have not yet been merged', async () => {
    const mockPrResponse = {
      ...basePrResponse,
      state: 'open',
      merged: false,
    };

    const pullScope = GitHubMocks.fetchPullRequest(mockPrResponse);

    expect.assertions(1);

    await request(staticman)
      .post(`/${version}/webhook`)
      .set('X-GitHub-Delivery', 'id')
      .set('X-GitHub-Event', 'pull_request')
      .send(baseWebhookBody)
      .expect(200);

    expect(pullScope.isDone()).toBe(true);
  });

  // eslint-disable-next-line jest/expect-expect
  it('ignores non-pull request events', async () => {
    await request(staticman)
      .post(`/${version}/webhook`)
      .set('X-GitHub-Delivery', 'id')
      .set('X-GitHub-Event', 'deployment')
      .send({})
      .expect(200);
  });
});
